{"version":3,"sources":["util/formatName.ts","roster.ts","util/fixTime.ts","util/fixData.ts","util/parse.ts","util/starters.ts","util/playComponents.ts","util/lineupEqual.ts","tableSetup.ts","util/calculateTime.ts","util/calculateTotal.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["findPlayer","shortHand","array","split","number","shift","lastName","pop","join","player","roster","find","baller","name","toLowerCase","includes","toFixed","Error","Lineup","players","time","pointsFor","pointsAgainst","dRebFor","dRebAgainst","oRebFor","oRebAgainst","madeTwosFor","missedTwosFor","madeTwosAgainst","missedTwosAgainst","madeThreesFor","madeThreesAgainst","missedThreesFor","missedThreesAgainst","turnoversFor","turnoversAgainst","assistsFor","assistsAgainst","FTAfor","FTAagainst","paintPointsFor","paintPointsAgainst","pointsFromTOFor","pointsFromTOAgainst","secondChanceFor","secondChanceAgainst","addTime","push","min","sec","isNaN","timeToSeconds","addBasket","teamPlay","made","paint","second","fromTO","type","addRebound","addTurnover","addAssist","report","console","log","this","sort","a","b","formattedRoster","map","person","firstName","formatName","gameDetails","header","gameTime","parse","data","playArray","replace","startersArray","splice","results","filter","x","forEach","line","test","length","starterData","playData","fixData","starters","checkRoster","string","match","checker","findStarters","currentLineup","currentIndex","play","details","getPlayComponents","toUpperCase","rmIndex","findIndex","addPlayer","outTime","lineupIndex","array1","array2","equals","newLineup","cols","title","dataIndex","width","calcTime","result","i","calcTotal","temp","Object","keys","reduce","prev","current","lineup","App","useState","plays","setPlays","setResults","show","setShow","onClick","className","scroll","columns","attemptedTwosFor","attemptedTwosAgainst","attemptedThreesFor","attemptedThreesAgainst","key","value","onChange","e","target","placeholder","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.936cafd8.chunk.js","sourcesContent":["import {player} from '../types';\r\nimport {roster} from '../roster';\r\n\r\n//Take the names found in the roster and convert them\r\n//to the form found in the play by play data, which is\r\n// e.g. 5 Smith J\r\n\r\nexport const formatName = (person: player): string => {\r\n  const array = person.name.split(' ');\r\n  const firstName = array.shift();\r\n  const lastName = array.join(' ');\r\n  return `${person.number} ${lastName} ${firstName}`;\r\n};\r\n\r\n//Take the names found in the play by play data and\r\n//convert them back into the player objects found in the roster\r\n//!NOTE: The names in the Play by Play are in the ALL CAPS\r\n\r\nexport const findPlayer = (shortHand: string): player => {\r\n  //shorthand will be in format of \"5 Smith J\"\r\n  const array = shortHand.split(' ');\r\n  const number = array.shift();\r\n  const firstName = array.pop();\r\n  const lastName = array.join(' ');\r\n  const player = roster.find(\r\n    (baller) =>\r\n      baller.name.toLowerCase().includes(lastName.toLowerCase()) &&\r\n      baller.number.toFixed(0) === number\r\n  );\r\n  if (!player) {\r\n    throw Error('No player found');\r\n  }\r\n  return player;\r\n};\r\n","import {player} from './types';\r\nimport {timeToSeconds} from './util/fixTime';\r\nimport {formatName} from './util/formatName';\r\n\r\nexport class Lineup {\r\n  players: player[];\r\n  time: number[];\r\n  pointsFor: number;\r\n  pointsAgainst: number;\r\n  dRebFor: number;\r\n  dRebAgainst: number;\r\n  oRebFor: number;\r\n  oRebAgainst: number;\r\n  madeTwosFor: number;\r\n  missedTwosFor: number;\r\n  madeTwosAgainst: number;\r\n  missedTwosAgainst: number;\r\n  madeThreesFor: number;\r\n  madeThreesAgainst: number;\r\n  missedThreesFor: number;\r\n  missedThreesAgainst: number;\r\n  turnoversFor: number;\r\n  turnoversAgainst: number;\r\n  assistsFor: number;\r\n  assistsAgainst: number;\r\n  FTAfor: number;\r\n  FTAagainst: number;\r\n  paintPointsFor: number;\r\n  paintPointsAgainst: number;\r\n  pointsFromTOFor: number;\r\n  pointsFromTOAgainst: number;\r\n  secondChanceFor: number;\r\n  secondChanceAgainst: number;\r\n  constructor(players: player[]) {\r\n    this.players = [...players].sort((a, b) =>\r\n      a.name > b.name ? 1 : a.name < b.name ? -1 : 0\r\n    );\r\n    this.pointsFor = 0;\r\n    this.pointsAgainst = 0;\r\n    this.dRebFor = 0;\r\n    this.dRebAgainst = 0;\r\n    this.oRebFor = 0;\r\n    this.oRebAgainst = 0;\r\n    this.madeTwosFor = 0;\r\n    this.missedTwosFor = 0;\r\n    this.madeTwosAgainst = 0;\r\n    this.missedTwosAgainst = 0;\r\n    this.madeThreesFor = 0;\r\n    this.madeThreesAgainst = 0;\r\n    this.missedThreesFor = 0;\r\n    this.missedThreesAgainst = 0;\r\n    this.paintPointsFor = 0;\r\n    this.paintPointsAgainst = 0;\r\n    this.secondChanceFor = 0;\r\n    this.secondChanceAgainst = 0;\r\n    this.pointsFromTOFor = 0;\r\n    this.pointsFromTOAgainst = 0;\r\n    this.turnoversFor = 0;\r\n    this.turnoversAgainst = 0;\r\n    this.assistsFor = 0;\r\n    this.assistsAgainst = 0;\r\n    this.FTAfor = 0;\r\n    this.FTAagainst = 0;\r\n    this.time = [];\r\n  }\r\n  addTime = (time: string) => {\r\n    this.time.push(timeToSeconds(time));\r\n  };\r\n  addBasket = (\r\n    teamPlay: boolean,\r\n    made: boolean,\r\n    paint: boolean,\r\n    second: boolean,\r\n    fromTO: boolean,\r\n    type: '2' | '3' | 'ft'\r\n  ) => {\r\n    if (type === 'ft') {\r\n      if (teamPlay) {\r\n        this.FTAfor += 1;\r\n        this.pointsFor += made ? 1 : 0;\r\n      } else {\r\n        this.FTAagainst += 1;\r\n        this.pointsAgainst += made ? 1 : 0;\r\n      }\r\n    } else if (type === '2') {\r\n      if (teamPlay) {\r\n        if (made) {\r\n          this.pointsFor += 2;\r\n          this.madeTwosFor += 1;\r\n          this.paintPointsFor += paint ? 2 : 0;\r\n          this.pointsFromTOFor += fromTO ? 2 : 0;\r\n          this.secondChanceFor += second ? 2 : 0\r\n        } else {\r\n          this.missedTwosFor += 1;\r\n        }\r\n      } else {\r\n        if (made) {\r\n          this.pointsAgainst += 2;\r\n          this.madeTwosAgainst += 1;\r\n          this.paintPointsAgainst += paint ? 2 : 0;\r\n          this.pointsFromTOAgainst += fromTO ? 2 : 0;\r\n          this.secondChanceAgainst += second ? 2 : 0\r\n        } else {\r\n          this.missedTwosAgainst += 1;\r\n        }\r\n      }\r\n    } else if (type === '3') {\r\n      if (teamPlay) {\r\n        if (made) {\r\n          this.pointsFor += 3;\r\n          this.madeThreesFor += 1;\r\n          this.secondChanceFor += second ? 3 : 0\r\n          this.pointsFromTOFor += fromTO ? 3 : 0\r\n        } else {\r\n          this.missedThreesFor += 1;\r\n        }\r\n      } else {\r\n        if (made) {\r\n          this.pointsAgainst += 3;\r\n          this.madeThreesAgainst += 1;\r\n          this.secondChanceAgainst += second ? 3 : 0\r\n          this.pointsFromTOAgainst += fromTO ? 3 : 0\r\n        } else {\r\n          this.missedThreesAgainst += 1;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  addRebound = (teamPlay: boolean, type: 'd' | 'o') => {\r\n    if (type === 'o') {\r\n      const key = teamPlay ? 'oRebFor' : 'oRebAgainst';\r\n      this[key] += 1;\r\n    } else {\r\n      const key = teamPlay ? 'dRebFor' : 'dRebAgainst';\r\n      this[key] += 1;\r\n    }\r\n  };\r\n  addTurnover = (teamPlay: boolean) => {\r\n    const key = teamPlay ? 'turnoversFor' : 'turnoversAgainst';\r\n    this[key] += 1;\r\n  };\r\n  addAssist = (teamPlay: boolean) => {\r\n    const key = teamPlay ? 'assistsFor' : 'assistsAgainst';\r\n    this[key] += 1;\r\n  };\r\n  report = () => {\r\n    console.log(this);\r\n  };\r\n}\r\n\r\nexport const roster: player[] = [\r\n  {name: 'Jake LaRavia', number: 0},\r\n  {\r\n    name: 'Isaiah Mucius',\r\n    number: 1,\r\n  },\r\n  {name: 'Cameron Hildreth', number: 2},\r\n\r\n  {\r\n    name: 'Daivien Williamson',\r\n    number: 4,\r\n  },\r\n  {\r\n    name: 'Carter Whitt',\r\n    number: 11,\r\n  },\r\n  {\r\n    name: 'Dallas Walton',\r\n    number: 13,\r\n  },\r\n  {\r\n    name: 'Khadim Sy',\r\n    number: 20,\r\n  },\r\n  {\r\n    name: 'Lucas Taylor',\r\n    number: 23,\r\n  },\r\n  {\r\n    name: 'Robert McCray',\r\n    number: 25,\r\n  },\r\n  {\r\n    name: 'Alondes Williams',\r\n    number: 31,\r\n  },\r\n  {\r\n    name: 'Matthew Marsh',\r\n    number: 33,\r\n  },\r\n  {\r\n    name: 'RJ Kennah',\r\n    number: 40,\r\n  },\r\n  {\r\n    name: 'Luc Robinson',\r\n    number: 44,\r\n  },\r\n  {\r\n    name: 'Anthony Mathis',\r\n    number: 45,\r\n  },\r\n  {\r\n    name: 'Kevin Dunn',\r\n    number: 51,\r\n  },\r\n  {\r\n    name: 'Grant van Beveren',\r\n    number: 52,\r\n  },\r\n  {\r\n    name: 'Miles Lester',\r\n    number: 55,\r\n  },\r\n  {\r\n    name: 'Tariq Ingraham',\r\n    number: 10,\r\n  },\r\n];\r\n\r\nexport const formattedRoster: string[] = roster.map((name) => formatName(name));\r\n","//this function takes the time in string mm:ss format\r\n//from the play by play data and returns it in seconds.\r\n//(in order to calculate total time on court)\r\n\r\n\r\n\r\n\r\nexport const timeToSeconds = (time:string):number =>{\r\n  const [minutes, seconds] = time.split(':')\r\n  const min = +minutes * 60\r\n  const sec = +seconds\r\n  if(isNaN(min) || isNaN(sec)){\r\n    throw Error('There was an error reading the time')\r\n  }\r\n  return min + sec\r\n}\r\n\r\n","//the following are headers found on the livestats header\r\n//at the top of each page, they will be removed from the\r\n//text so that 1 seamless copy/paste can be used\r\n\r\nconst gameDetails =\r\n  /(Official Basketball Play by Play)(.|\\n)*?(Officials: .+)/gi;\r\nconst header = /(Game Time)(.+)(Score Diff)(.+)/gi;\r\nconst gameTime = /\\d+:\\d+/;\r\n\r\n//a function to fix the data into an easier format to manipulate\r\nexport const fixData = (data: string) => {\r\n  //remove the header data\r\n  const playArray = data\r\n    .replace(gameDetails, '')\r\n    .replace(header, '')\r\n    .split(/\\n/);\r\n  const startersArray = playArray.splice(0, 2);\r\n  let results: string[] = [];\r\n  playArray\r\n    .filter((x) => x !== '')\r\n    .forEach((line) => {\r\n      if(gameTime.test(line)||line==='OVERTIME'){\r\n        results.push(line)\r\n      }\r\n      else{\r\n        //just concat it to the end of the last thing in the array \r\n        results[results.length-1] += ` ${line}`\r\n      }\r\n    })\r\n    return {starterData: startersArray, playData: results}\r\n};\r\n","import {Lineup} from '../roster';\nimport {player} from '../types';\nimport {getPlayComponents} from './playComponents';\nimport {findStarters} from './starters';\nimport {fixData} from './fixData';\nimport {formattedRoster} from '../roster';\nimport {findPlayer} from './formatName';\nimport {equals} from './lineupEqual';\n\nexport const parse = (data: string): Lineup[] => {\n  //get starter data and pbp data\n  const {starterData, playData} = fixData(data);\n  const starters = new Lineup(findStarters(starterData));\n  starters.addTime('20:00');\n  //keep track of results, current lineup and index\n  let currentLineup: player[] = [...starters.players];\n  let results: Lineup[] = [starters];\n  let currentIndex = 0;\n  //parse through each line and extract the data.\n  playData.forEach((play) => {\n    const {time, player, details} = getPlayComponents(play);\n    const teamPlay =\n      player &&\n      formattedRoster.find((person) => person.toUpperCase().includes(player))\n        ? true\n        : false;\n    const made = details.includes('made');\n    const paint = details.includes('in the paint');\n    const second = details.includes('second chance');\n    const fromTO = details.includes('from turnover');\n    //START PLAY BY PLAY LINE EVALUATION HERE\n    if (player) {\n      if (details.includes('substitution')) {\n        if (teamPlay) {\n          //we only care about our team's substituions\n          if (details.includes('substitution out')) {\n            //we only care about our teams subs\n            const rmIndex = currentLineup.findIndex(\n              (x) => x.name === findPlayer(player!).name\n            );\n            if (rmIndex !== -1) {\n              //remove the player\n              currentLineup.splice(rmIndex, 1);\n            } else {\n              throw Error(`Error with substitution at ${time}`);\n            }\n          } else if (details.includes('substitution in')) {\n            const addPlayer = findPlayer(player);\n            currentLineup.push(addPlayer);\n          }\n          //after subbing players in and out, make the lineup\n          if (currentLineup.length === 5) {\n            const outTime = time === '20:00' ? '00:00' : time; //for subs that change at the half\n            const lineupIndex = results.findIndex((x) =>\n              equals(x.players, currentLineup)\n            );\n            if (lineupIndex === -1) {\n              //new lineup\n              const newLineup = new Lineup(currentLineup);\n              newLineup.addTime(time); //sub in time\n              results.push(newLineup);\n              results[currentIndex].addTime(outTime); //subOut TIme\n              currentIndex = results.length - 1;\n            } else {\n              //the lineup already exists\n              results[currentIndex].addTime(outTime); //subOut Time\n              currentIndex = lineupIndex;\n              results[lineupIndex].addTime(time); //sub in time\n            }\n          }\n        }\n      } else if (details.includes('2pt FG')) {\n        results[currentIndex].addBasket(\n          teamPlay,\n          made,\n          paint,\n          second,\n          fromTO,\n          '2'\n        );\n      } else if (details.includes('3pt FG')) {\n        results[currentIndex].addBasket(\n          teamPlay,\n          made,\n          false,\n          second,\n          fromTO,\n          '3'\n        );\n      } else if (details.includes('free throw')) {\n        const made = details.includes('made');\n        results[currentIndex].addBasket(\n          teamPlay,\n          made,\n          false,\n          second,\n          fromTO,\n          'ft'\n        );\n      } else if (details.includes('assist')) {\n        results[currentIndex].addAssist(teamPlay);\n      } else if (details.includes('turnover')) {\n        results[currentIndex].addTurnover(teamPlay);\n      } else if (details.includes('rebound')) {\n        const type = details.includes('defensive') ? 'd' : 'o';\n        results[currentIndex].addRebound(teamPlay, type);\n      }\n    } else {\n      //cases where player is null\n      if (details === 'OVERTIME') {\n        //to make time work accurately, add 0 and 05:00 time to current lineup\n        results[currentIndex].addTime(time);\n        results[currentIndex].addTime('05:00');\n      }\n    }\n  });\n  //All plays finished, add 0 to the last lineup's time\n  results[currentIndex].addTime('00:00');\n  return results;\n};\n","import {formattedRoster} from '../roster';\r\nimport {player} from '../types';\r\nimport {findPlayer} from './formatName';\r\n\r\n//Determine which of the two starting lineups is the user's team. \r\n//The name given to the team may be different depending on who creates the PDF\r\n//convert the strings into an array of individual players, then determine which\r\n//array contains players found in the roster.\r\n\r\nexport const findStarters = (array: string[]): player[] => {\r\n  const checkRoster = formattedRoster.join(' ');\r\n  const teams = array.map((string) => string.match(/\\d+(\\s[a-zA-Z]+)+/g));\r\n  const [starters] = teams.filter((starters) => {\r\n    let checker = true;\r\n    starters?.forEach((name) => {\r\n      if (!checkRoster.includes(name)) {\r\n        checker = false;\r\n      }\r\n    });\r\n    return checker;\r\n  });\r\n  if (!starters) {\r\n    throw Error('There was an error loading the starters');\r\n  }\r\n  return starters.map((shortHand) => findPlayer(shortHand));\r\n};\r\n","//a function to break each line into its components\r\n\r\nexport const getPlayComponents = (play: string) =>{\r\n  //special case, this will be user added to the text box\r\n  if(play === 'OVERTIME'){\r\n    return {time: '00:00', player:null, details:'OVERTIME'}\r\n  }\r\n  const [time,...rest] = play.split(' ')\r\n  const [player] = rest.join(' ').match(/\\d+(\\s[A-Z]+)+/) || [null]\r\n  const details = player ? play.split(player).pop() : play.split(time).pop()\r\n  if(!details){\r\n    throw Error('Play details not found')\r\n  }\r\n  return {time, player, details}\r\n}\r\n","//a function to determine if the 5 players in the lineup array\r\n//match the 5 players in the lineup in the result array\r\n\r\nimport { player } from '../types';\r\n\r\nexport const equals = (array1: player[], array2:player[]):boolean =>{\r\n  let results = true;\r\n  array1.forEach((player)=>{\r\n    if(!array2.find(x=>x.name === player.name)){\r\n      results = false\r\n    }\r\n  })\r\n  return results\r\n}","export const cols = [\r\n  {\r\n    title: 'Lineup',\r\n    dataIndex: 'players',\r\n    width: 200\r\n  },\r\n  {\r\n    title: 'Time',\r\n    dataIndex: 'time',\r\n    width: 50\r\n  },\r\n  {\r\n    title: 'Pts For',\r\n    dataIndex: 'pointsFor',\r\n  },\r\n  {\r\n    title: 'Pts Ag',\r\n    dataIndex: 'pointsAgainst'\r\n  },\r\n  {\r\n    title: 'DReb For',\r\n    dataIndex: 'dRebFor'\r\n  },\r\n  {\r\n    title: 'DReb Ag',\r\n    dataIndex: 'dRebAgainst'\r\n  },\r\n  {\r\n    title: 'OReb For',\r\n    dataIndex: 'oRebFor'\r\n  },\r\n  {\r\n    title: 'OReb Ag',\r\n    dataIndex: 'oRebAgainst'\r\n  },\r\n  {\r\n    title: 'FTA For',\r\n    dataIndex: 'FTAfor'\r\n  },\r\n  {\r\n    title: 'FTA Ag',\r\n    dataIndex: 'FTAagainst'\r\n  },\r\n  {\r\n    title: '2PM For',\r\n    dataIndex: 'madeTwosFor'\r\n  },\r\n  {\r\n    title: '2PA For',\r\n    dataIndex: 'attemptedTwosFor'\r\n  },\r\n  {\r\n    title: '2PM Ag',\r\n    dataIndex: 'madeTwosAgainst'\r\n  },\r\n  {\r\n    title: '2PA Ag',\r\n    dataIndex: 'attemptedTwosAgainst'\r\n  },\r\n  {\r\n    title: '3PM For',\r\n    dataIndex: 'madeThreesFor'\r\n  },\r\n  {\r\n    title: '3PA For',\r\n    dataIndex: 'attemptedThreesFor'\r\n  },\r\n  {\r\n    title: '3PM Ag',\r\n    dataIndex: 'madeThreesAgainst'\r\n  },\r\n  {\r\n    title: '3PA Ag',\r\n    dataIndex: 'attemptedThreesAgainst'\r\n  },\r\n  {\r\n    title: 'AST For',\r\n    dataIndex: 'assistsFor'\r\n  },\r\n  {\r\n    title: 'AST Ag',\r\n    dataIndex: 'assistsAgainst'\r\n  },\r\n  {\r\n    title: 'TO For',\r\n    dataIndex: 'turnoversFor'\r\n  },\r\n  {\r\n    title: 'TO Ag',\r\n    dataIndex: 'turnoversAgainst'\r\n  },\r\n  {\r\n    title: 'Paint For',\r\n    dataIndex: 'paintPointsFor'\r\n  },\r\n  {\r\n    title: 'Paint Ag',\r\n    dataIndex: 'paintPointsAgainst'\r\n  },\r\n  {\r\n    title: '2nd For',\r\n    dataIndex: 'secondChanceFor'\r\n  },\r\n  {\r\n    title: '2nd Ag',\r\n    dataIndex: 'secondChanceAgainst'\r\n  },\r\n  \r\n]","//function to calculate the total time in seconds\r\n//given the time array\r\n\r\n\r\nexport const calcTime = (time:number[]):number =>{\r\n  let result = 0\r\n  for (let i = 0; i < time.length; i+=2) {\r\n    result += (time[i] - time[i+1])\r\n  }\r\n  return result\r\n}\r\n","//a function to calculate the total of all the lineups\r\n//return a lineup object with the totals \r\n\r\nimport { Lineup } from '../roster';\r\n\r\nexport const calcTotal = (array:Lineup[]) =>{\r\n  let temp = new Lineup([{name: 'Total', number: 0}]);\r\n  const keys = Object.keys(temp) as Array<keyof typeof temp>\r\n  keys.forEach((x)=>{\r\n    if(typeof temp[x] === 'number'){\r\n      (temp[x] as number) = array.reduce((prev,current)=>prev + (current[x] as number),0)\r\n    }\r\n  })\r\n  //add all of the times to the temp to be calced later\r\n  array.forEach((lineup)=>lineup.time.forEach((time)=>temp.time.push(time)))\r\n  return temp\r\n}","import React, {useState} from 'react';\nimport {parse} from './util/parse';\nimport './App.css';\nimport {Lineup} from './roster';\nimport Table from 'rc-table';\nimport {cols} from './tableSetup';\nimport {calcTime} from './util/calculateTime';\nimport {calcTotal} from './util/calculateTotal';\n\nfunction App() {\n  const [plays, setPlays] = useState<string>('');\n  const [results, setResults] = useState<Lineup[]>([]);\n  const [show, setShow] = useState<boolean>(false);\n  const handleSubmit = () => {\n    const results = parse(plays);\n    console.log(results)\n    setResults(results);\n    setShow(true);\n  };\n  if (show) {\n    return (\n      <div>\n        <button type=\"button\" onClick={() => setShow(false)}>\n          Back\n        </button>\n        <Table\n          className=\"resultsTable\"\n          scroll={{x: true}}\n          columns={cols}\n          data={[...results, calcTotal(results)].map((x, i) => {\n            return {\n              ...x,\n              players: x.players.map((x) => x.name).join('-'),\n              time: calcTime(x.time),\n              attemptedTwosFor: x.madeTwosFor + x.missedTwosFor,\n              attemptedTwosAgainst: x.madeTwosAgainst + x.missedTwosAgainst,\n              attemptedThreesFor: x.madeThreesFor + x.missedThreesFor,\n              attemptedThreesAgainst:\n                x.madeThreesAgainst + x.missedThreesAgainst,\n              key: i,\n            };\n          })}\n        />\n      </div>\n    );\n  }\n  return (\n    <div className=\"App\">\n      <textarea\n        value={plays}\n        onChange={(e) => setPlays(e.target.value)}\n        className=\"textBox\"\n        placeholder='Enter the play by play data here, starting with both teams starters.'\n      ></textarea>\n      <button className=\"submit\" type=\"button\" onClick={handleSubmit}>\n        Submit\n      </button>\n      <div style={{color: 'white'}}></div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}