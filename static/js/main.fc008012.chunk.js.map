{"version":3,"sources":["util/formatName.ts","roster.ts","util/fixTime.ts","util/fixData.ts","util/parse.ts","util/starters.ts","util/playComponents.ts","util/lineupEqual.ts","tableSetup.ts","util/calculateTime.ts","util/calculateTotal.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["formatName","person","array","name","split","firstName","shift","lastName","join","number","findPlayer","shortHand","men","theRoster","roster","womenRoster","pop","player","find","baller","toLowerCase","includes","toFixed","Error","Lineup","players","time","pointsFor","pointsAgainst","dRebFor","dRebAgainst","oRebFor","oRebAgainst","madeTwosFor","missedTwosFor","madeTwosAgainst","missedTwosAgainst","madeThreesFor","madeThreesAgainst","missedThreesFor","missedThreesAgainst","turnoversFor","turnoversAgainst","assistsFor","assistsAgainst","FTAfor","FTAagainst","paintPointsFor","paintPointsAgainst","pointsFromTOFor","pointsFromTOAgainst","secondChanceFor","secondChanceAgainst","addTime","push","min","sec","isNaN","timeToSeconds","addBasket","teamPlay","made","paint","second","fromTO","type","addRebound","addTurnover","addAssist","report","console","log","this","sort","a","b","formattedRoster","map","formattedWRoster","gameDetails","header","gameTime","parse","data","playArray","replace","startersArray","splice","results","filter","x","forEach","line","test","length","starterData","playData","fixData","starters","checkRoster","string","match","checker","findStarters","startTime","currentLineup","rosterList","currentIndex","half","quarter","play","playIndex","details","getPlayComponents","toUpperCase","rmIndex","findIndex","addPlayer","lineupIndex","array1","array2","equals","newLineup","first","cols","title","dataIndex","width","calcTime","result","i","calcTotal","temp","Object","keys","reduce","prev","current","lineup","App","useState","plays","setPlays","setResults","show","setShow","setMen","onClick","className","scroll","columns","attemptedTwosFor","attemptedTwosAgainst","attemptedThreesFor","attemptedThreesAgainst","key","value","onChange","e","target","placeholder","style","color","fontSize","checked","checkedIcon","uncheckedIcon","borderRadius","onColor","offColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc008012.chunk.js","sourcesContent":["import {player} from '../types';\r\nimport {roster, womenRoster} from '../roster';\r\n\r\n//Take the names found in the roster and convert them\r\n//to the form found in the play by play data, which is\r\n// e.g. 5 Smith J\r\n\r\nexport const formatName = (person: player): string => {\r\n  const array = person.name.split(' ');\r\n  const firstName = array.shift();\r\n  const lastName = array.join(' ');\r\n  return `${person.number} ${lastName} ${firstName}`;\r\n};\r\n\r\n//Take the names found in the play by play data and\r\n//convert them back into the player objects found in the roster\r\n//!NOTE: The names in the Play by Play are in the ALL CAPS\r\n\r\nexport const findPlayer = (shortHand: string, men: boolean): player => {\r\n  const theRoster = men ? roster : womenRoster\r\n  //shorthand will be in format of \"5 Smith J\"\r\n  const array = shortHand.split(' ');\r\n  const number = array.shift();\r\n  const firstName = array.pop();\r\n  const lastName = array.join(' ');\r\n  const player = theRoster.find(\r\n    (baller) =>\r\n      baller.name.toLowerCase().includes(lastName.toLowerCase()) &&\r\n      baller.number.toFixed(0) === number\r\n  );\r\n  if (!player) {\r\n    throw Error('No player found');\r\n  }\r\n  return player;\r\n};\r\n","import { format } from 'path';\r\nimport {player} from './types';\r\nimport {timeToSeconds} from './util/fixTime';\r\nimport {formatName} from './util/formatName';\r\n\r\nexport class Lineup {\r\n  players: player[];\r\n  time: number[];\r\n  pointsFor: number;\r\n  pointsAgainst: number;\r\n  dRebFor: number;\r\n  dRebAgainst: number;\r\n  oRebFor: number;\r\n  oRebAgainst: number;\r\n  madeTwosFor: number;\r\n  missedTwosFor: number;\r\n  madeTwosAgainst: number;\r\n  missedTwosAgainst: number;\r\n  madeThreesFor: number;\r\n  madeThreesAgainst: number;\r\n  missedThreesFor: number;\r\n  missedThreesAgainst: number;\r\n  turnoversFor: number;\r\n  turnoversAgainst: number;\r\n  assistsFor: number;\r\n  assistsAgainst: number;\r\n  FTAfor: number;\r\n  FTAagainst: number;\r\n  paintPointsFor: number;\r\n  paintPointsAgainst: number;\r\n  pointsFromTOFor: number;\r\n  pointsFromTOAgainst: number;\r\n  secondChanceFor: number;\r\n  secondChanceAgainst: number;\r\n  constructor(players: player[]) {\r\n    this.players = [...players].sort((a, b) =>\r\n      a.name > b.name ? 1 : a.name < b.name ? -1 : 0\r\n    );\r\n    this.pointsFor = 0;\r\n    this.pointsAgainst = 0;\r\n    this.dRebFor = 0;\r\n    this.dRebAgainst = 0;\r\n    this.oRebFor = 0;\r\n    this.oRebAgainst = 0;\r\n    this.madeTwosFor = 0;\r\n    this.missedTwosFor = 0;\r\n    this.madeTwosAgainst = 0;\r\n    this.missedTwosAgainst = 0;\r\n    this.madeThreesFor = 0;\r\n    this.madeThreesAgainst = 0;\r\n    this.missedThreesFor = 0;\r\n    this.missedThreesAgainst = 0;\r\n    this.paintPointsFor = 0;\r\n    this.paintPointsAgainst = 0;\r\n    this.secondChanceFor = 0;\r\n    this.secondChanceAgainst = 0;\r\n    this.pointsFromTOFor = 0;\r\n    this.pointsFromTOAgainst = 0;\r\n    this.turnoversFor = 0;\r\n    this.turnoversAgainst = 0;\r\n    this.assistsFor = 0;\r\n    this.assistsAgainst = 0;\r\n    this.FTAfor = 0;\r\n    this.FTAagainst = 0;\r\n    this.time = [];\r\n  }\r\n  addTime = (time: string) => {\r\n    this.time.push(timeToSeconds(time));\r\n  };\r\n  addBasket = (\r\n    teamPlay: boolean,\r\n    made: boolean,\r\n    paint: boolean,\r\n    second: boolean,\r\n    fromTO: boolean,\r\n    type: '2' | '3' | 'ft'\r\n  ) => {\r\n    if (type === 'ft') {\r\n      if (teamPlay) {\r\n        this.FTAfor += 1;\r\n        this.pointsFor += made ? 1 : 0;\r\n      } else {\r\n        this.FTAagainst += 1;\r\n        this.pointsAgainst += made ? 1 : 0;\r\n      }\r\n    } else if (type === '2') {\r\n      if (teamPlay) {\r\n        if (made) {\r\n          this.pointsFor += 2;\r\n          this.madeTwosFor += 1;\r\n          this.paintPointsFor += paint ? 2 : 0;\r\n          this.pointsFromTOFor += fromTO ? 2 : 0;\r\n          this.secondChanceFor += second ? 2 : 0;\r\n        } else {\r\n          this.missedTwosFor += 1;\r\n        }\r\n      } else {\r\n        if (made) {\r\n          this.pointsAgainst += 2;\r\n          this.madeTwosAgainst += 1;\r\n          this.paintPointsAgainst += paint ? 2 : 0;\r\n          this.pointsFromTOAgainst += fromTO ? 2 : 0;\r\n          this.secondChanceAgainst += second ? 2 : 0;\r\n        } else {\r\n          this.missedTwosAgainst += 1;\r\n        }\r\n      }\r\n    } else if (type === '3') {\r\n      if (teamPlay) {\r\n        if (made) {\r\n          this.pointsFor += 3;\r\n          this.madeThreesFor += 1;\r\n          this.secondChanceFor += second ? 3 : 0;\r\n          this.pointsFromTOFor += fromTO ? 3 : 0;\r\n        } else {\r\n          this.missedThreesFor += 1;\r\n        }\r\n      } else {\r\n        if (made) {\r\n          this.pointsAgainst += 3;\r\n          this.madeThreesAgainst += 1;\r\n          this.secondChanceAgainst += second ? 3 : 0;\r\n          this.pointsFromTOAgainst += fromTO ? 3 : 0;\r\n        } else {\r\n          this.missedThreesAgainst += 1;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  addRebound = (teamPlay: boolean, type: 'd' | 'o') => {\r\n    if (type === 'o') {\r\n      const key = teamPlay ? 'oRebFor' : 'oRebAgainst';\r\n      this[key] += 1;\r\n    } else {\r\n      const key = teamPlay ? 'dRebFor' : 'dRebAgainst';\r\n      this[key] += 1;\r\n    }\r\n  };\r\n  addTurnover = (teamPlay: boolean) => {\r\n    const key = teamPlay ? 'turnoversFor' : 'turnoversAgainst';\r\n    this[key] += 1;\r\n  };\r\n  addAssist = (teamPlay: boolean) => {\r\n    const key = teamPlay ? 'assistsFor' : 'assistsAgainst';\r\n    this[key] += 1;\r\n  };\r\n  report = () => {\r\n    console.log(this);\r\n  };\r\n}\r\n\r\nexport const roster: player[] = [\r\n  {name: 'Lucas Taylor', number: 0},\r\n  {\r\n    name: 'Tyree Appleby',\r\n    number: 1,\r\n  },\r\n  {name: 'Cameron Hildreth', number: 2},\r\n\r\n  {\r\n    name: 'Daivien Williamson',\r\n    number: 4,\r\n  },\r\n  {\r\n    name: 'Jao Ituka',\r\n    number: 10,\r\n  },\r\n  {\r\n    name: 'Andrew Carr',\r\n    number: 11,\r\n  },\r\n  {\r\n    name: 'Robert McCray',\r\n    number: 13,\r\n  },\r\n  {\r\n    name: 'Davion Bradford',\r\n    number: 20,\r\n  },\r\n  {\r\n    name: 'Zach Keller',\r\n    number: 25,\r\n  },\r\n  {\r\n    name: 'Damari Monsanto',\r\n    number: 30,\r\n  },\r\n  {\r\n    name: 'Matthew Marsh',\r\n    number: 33,\r\n  },\r\n  {\r\n    name: 'Bobi Klintman',\r\n    number: 34,\r\n  },\r\n  {\r\n    name: 'RJ Kennah',\r\n    number: 40,\r\n  },\r\n  {\r\n    name: 'Xiaolong Xu',\r\n    number: 45,\r\n  },\r\n  {\r\n    name: 'Kevin Dunn',\r\n    number: 51,\r\n  },\r\n  {\r\n    name: 'Grant van Beveren',\r\n    number: 52,\r\n  },\r\n  {\r\n    name: 'Owen Kmety',\r\n    number: 55,\r\n  },\r\n];\r\n\r\nexport const womenRoster: player[] = [\r\n  {name: 'Alyssa Andrews', number: 0},\r\n  {name: 'Kaia Harrison', number: 2},\r\n  {name: 'Mack Maier', number: 3},\r\n  {name: 'Aliah McWhorter', number: 4},\r\n  {name: 'Malaya Cowles', number: 5},\r\n  {name: 'Raegyn Conley', number: 11},\r\n  {name: 'Kate Deeble', number: 12},\r\n  {name: 'Marta Morales', number: 13},\r\n  {name: 'Niyah Becker', number: 14},\r\n  {name: 'Olivia Summiel', number: 20},\r\n  {name: 'Elise Williams', number: 21},\r\n  {name: 'Jewel Spear', number: 24},\r\n  {name: 'Demeara Hinds', number: 25},\r\n  {name: 'Alexandria Scruggs', number: 32},\r\n];\r\n\r\nexport const formattedRoster: string[] = roster.map((name) => formatName(name));\r\nexport const formattedWRoster : string[] = womenRoster.map((name)=>formatName(name));\r\n","//this function takes the time in string mm:ss format\r\n//from the play by play data and returns it in seconds.\r\n//(in order to calculate total time on court)\r\n\r\n\r\n\r\n\r\nexport const timeToSeconds = (time:string):number =>{\r\n  const [minutes, seconds] = time.split(':')\r\n  const min = +minutes * 60\r\n  const sec = +seconds\r\n  if(isNaN(min) || isNaN(sec)){\r\n    throw Error('There was an error reading the time')\r\n  }\r\n  return min + sec\r\n}\r\n\r\n","//the following are headers found on the livestats header\r\n//at the top of each page, they will be removed from the\r\n//text so that 1 seamless copy/paste can be used\r\n\r\nconst gameDetails =\r\n  /(Official Basketball Play by Play)(.|\\n)*?(Officials: .+)/gi;\r\nconst header = /(Game Time)(.+)(Score Diff)(.+)/gi;\r\nconst gameTime = /\\d+:\\d+/;\r\n\r\nconst keepThese = ['OVERTIME', 'END OF PERIOD'];\r\n\r\n//a function to fix the data into an easier format to manipulate\r\nexport const fixData = (data: string) => {\r\n  //remove the header data\r\n  const playArray = data\r\n    .replace(gameDetails, '')\r\n    .replace(header, '')\r\n    .split(/\\n/);\r\n  const startersArray = playArray.splice(0, 2);\r\n  let results: string[] = [];\r\n  playArray\r\n    .filter((x) => x !== '')\r\n    .forEach((line) => {\r\n      if(gameTime.test(line)||line.includes('END OF')){\r\n        results.push(line)\r\n      }\r\n      else{\r\n        //just concat it to the end of the last thing in the array \r\n        results[results.length-1] += ` ${line}`\r\n      }\r\n    })\r\n    return {starterData: startersArray, playData: results}\r\n};\r\n","import {Lineup} from '../roster';\nimport {player} from '../types';\nimport {getPlayComponents} from './playComponents';\nimport {findStarters} from './starters';\nimport {fixData} from './fixData';\nimport {formattedRoster, formattedWRoster} from '../roster';\nimport {findPlayer} from './formatName';\nimport {equals} from './lineupEqual';\n\nexport const parse = (data: string, men: boolean): Lineup[] => {\n  //get starter data and pbp data\n  const {starterData, playData} = fixData(data);\n  const starters = new Lineup(findStarters(starterData, men));\n  const startTime = men ? '20:00' : '10:00'    //women play 10 minutes quarters\n  starters.addTime(startTime);\n  //keep track of results, current lineup and index\n  let currentLineup: player[] = [...starters.players];\n  const rosterList = men ? formattedRoster : formattedWRoster;\n  let results: Lineup[] = [starters];\n  let currentIndex = 0;\n  let half = 1;\n  let quarter = 1;\n  //parse through each line and extract the data.\n  playData.forEach((play, playIndex) => {\n    const {time, player, details} = getPlayComponents(play);\n    const teamPlay =\n      player &&\n      rosterList.find((person) => person.toUpperCase().includes(player))\n        ? true\n        : false;\n    const made = details.includes('made');\n    const paint = details.includes('in the paint');\n    const second = details.includes('second chance');\n    const fromTO = details.includes('from turnover');\n    //START PLAY BY PLAY LINE EVALUATION HERE\n    if (player) {\n      if (details.includes('substitution')) {\n        if (teamPlay) {\n          //we only care about our team's substituions\n          if (details.includes('substitution out')) {\n            //we only care about our teams subs\n            const rmIndex = currentLineup.findIndex(\n              (x) => x.name === findPlayer(player!,men).name\n            );\n            if (rmIndex !== -1) {\n              //remove the player\n              currentLineup.splice(rmIndex, 1);\n            } else {\n              throw Error(`Error with substitution at ${time}`);\n            }\n          } else if (details.includes('substitution in')) {\n            const addPlayer = findPlayer(player,men);\n            currentLineup.push(addPlayer);\n          }\n          //after subbing players in and out, make the lineup\n          if (currentLineup.length === 5) {\n            const lineupIndex = results.findIndex((x) =>\n              equals(x.players, currentLineup)\n            );\n            if (lineupIndex === -1) {\n              //new lineup\n              const newLineup = new Lineup(currentLineup);\n              newLineup.addTime(time); //sub in time\n              results.push(newLineup);\n              results[currentIndex].addTime(time); //subOut TIme\n              currentIndex = results.length - 1;\n            } else {\n              //the lineup already exists\n              results[currentIndex].addTime(time); //subOut Time\n              currentIndex = lineupIndex;\n              results[lineupIndex].addTime(time); //sub in time\n            }\n          }\n        }\n      } else if (details.includes('2pt FG')) {\n        results[currentIndex].addBasket(\n          teamPlay,\n          made,\n          paint,\n          second,\n          fromTO,\n          '2'\n        );\n      } else if (details.includes('3pt FG')) {\n        results[currentIndex].addBasket(\n          teamPlay,\n          made,\n          false,\n          second,\n          fromTO,\n          '3'\n        );\n      } else if (details.includes('free throw')) {\n        const made = details.includes('made');\n        results[currentIndex].addBasket(\n          teamPlay,\n          made,\n          false,\n          second,\n          fromTO,\n          'ft'\n        );\n      } else if (details.includes('assist')) {\n        results[currentIndex].addAssist(teamPlay);\n      } else if (details.includes('turnover')) {\n        //special case b/c steal and turnover can appear on the same line\n        if(details.includes('steal')){\n          //determine the first word of the play (filter in case 1st char is a space)\n          const [first] = details.split(' ').filter(x=>x!=='')\n          console.log(first)\n          //if its a steal, give a TO to opposite of teamPlay\n          if(first === 'steal'){\n            results[currentIndex].addTurnover(!teamPlay)\n          }\n          //if its TO, give TO to teamPlay\n          else{\n            results[currentIndex].addTurnover(teamPlay)\n          }\n        }\n        else{\n          //no steal involved\n          results[currentIndex].addTurnover(teamPlay);\n        }\n\n        \n      } else if (details.includes('rebound')) {\n        const type = details.includes('defensive') ? 'd' : 'o';\n        results[currentIndex].addRebound(teamPlay, type);\n      }\n    } else {\n      //cases where player is null\n      if (details === 'END OF PERIOD') {\n        if ((men && half === 1) || (!men && quarter <= 4)) {\n          results[currentIndex].addTime('00:00');\n          results[currentIndex].addTime(startTime);\n          half = 2;\n          quarter++;\n        } else {\n          //end of the second or OT\n          results[currentIndex].addTime('00:00');\n          results[currentIndex].addTime('05:00');\n        }\n      } else if (details === 'END OF GAME') {\n        results[currentIndex].addTime('00:00');\n      }\n    }\n  });\n  return results;\n};\n","import {formattedRoster, formattedWRoster} from '../roster';\r\nimport {player} from '../types';\r\nimport {findPlayer} from './formatName';\r\n\r\n//Determine which of the two starting lineups is the user's team. \r\n//The name given to the team may be different depending on who creates the PDF\r\n//convert the strings into an array of individual players, then determine which\r\n//array contains players found in the roster.\r\n\r\nexport const findStarters = (array: string[], men: boolean): player[] => {\r\n  const checkRoster = men ? formattedRoster.join(' '): formattedWRoster.join(' ');\r\n  const teams = array.map((string) => string.match(/\\d+(\\s[a-zA-Z]+)+/g));\r\n  const [starters] = teams.filter((starters) => {\r\n    let checker = true;\r\n    starters?.forEach((name) => {\r\n      if (!checkRoster.includes(name)) {\r\n        checker = false;\r\n      }\r\n    });\r\n    return checker;\r\n  });\r\n  if (!starters) {\r\n    throw Error('There was an error loading the starters');\r\n  }\r\n  return starters.map((shortHand) => findPlayer(shortHand, men));\r\n};\r\n","//a function to break each line into its components\r\n\r\nexport const getPlayComponents = (play: string) =>{\r\n  //special cases, needed for timing\r\n  if(play === 'END OF PERIOD'){\r\n    return {time: '00:00', player:null, details:'END OF PERIOD'}\r\n  }\r\n  else if(play === 'END OF GAME'){\r\n    return {time: '00:00', player:null, details:'END OF GAME'}\r\n  }\r\n  //elsewise, just split the play into time, player, and details\r\n  const [time,...rest] = play.split(' ')\r\n  const [player] = rest.join(' ').match(/\\d+(\\s[A-Z]+)+/) || [null]\r\n  const details = player ? play.split(player).pop() : play.split(time).pop()\r\n  if(!details){\r\n    throw Error('Play details not found')\r\n  }\r\n  return {time, player, details}\r\n}\r\n","//a function to determine if the 5 players in the lineup array\r\n//match the 5 players in the lineup in the result array\r\n\r\nimport { player } from '../types';\r\n\r\nexport const equals = (array1: player[], array2:player[]):boolean =>{\r\n  let results = true;\r\n  array1.forEach((player)=>{\r\n    if(!array2.find(x=>x.name === player.name)){\r\n      results = false\r\n    }\r\n  })\r\n  return results\r\n}","export const cols = [\r\n  {\r\n    title: 'Lineup',\r\n    dataIndex: 'players',\r\n    width: 200\r\n  },\r\n  {\r\n    title: 'Time',\r\n    dataIndex: 'time',\r\n    width: 50\r\n  },\r\n  {\r\n    title: 'Pts For',\r\n    dataIndex: 'pointsFor',\r\n  },\r\n  {\r\n    title: 'Pts Ag',\r\n    dataIndex: 'pointsAgainst'\r\n  },\r\n  {\r\n    title: 'DReb For',\r\n    dataIndex: 'dRebFor'\r\n  },\r\n  {\r\n    title: 'DReb Ag',\r\n    dataIndex: 'dRebAgainst'\r\n  },\r\n  {\r\n    title: 'OReb For',\r\n    dataIndex: 'oRebFor'\r\n  },\r\n  {\r\n    title: 'OReb Ag',\r\n    dataIndex: 'oRebAgainst'\r\n  },\r\n  {\r\n    title: 'FTA For',\r\n    dataIndex: 'FTAfor'\r\n  },\r\n  {\r\n    title: 'FTA Ag',\r\n    dataIndex: 'FTAagainst'\r\n  },\r\n  {\r\n    title: '2PM For',\r\n    dataIndex: 'madeTwosFor'\r\n  },\r\n  {\r\n    title: '2PA For',\r\n    dataIndex: 'attemptedTwosFor'\r\n  },\r\n  {\r\n    title: '2PM Ag',\r\n    dataIndex: 'madeTwosAgainst'\r\n  },\r\n  {\r\n    title: '2PA Ag',\r\n    dataIndex: 'attemptedTwosAgainst'\r\n  },\r\n  {\r\n    title: '3PM For',\r\n    dataIndex: 'madeThreesFor'\r\n  },\r\n  {\r\n    title: '3PA For',\r\n    dataIndex: 'attemptedThreesFor'\r\n  },\r\n  {\r\n    title: '3PM Ag',\r\n    dataIndex: 'madeThreesAgainst'\r\n  },\r\n  {\r\n    title: '3PA Ag',\r\n    dataIndex: 'attemptedThreesAgainst'\r\n  },\r\n  {\r\n    title: 'AST For',\r\n    dataIndex: 'assistsFor'\r\n  },\r\n  {\r\n    title: 'AST Ag',\r\n    dataIndex: 'assistsAgainst'\r\n  },\r\n  {\r\n    title: 'TO For',\r\n    dataIndex: 'turnoversFor'\r\n  },\r\n  {\r\n    title: 'TO Ag',\r\n    dataIndex: 'turnoversAgainst'\r\n  },\r\n  {\r\n    title: 'Paint For',\r\n    dataIndex: 'paintPointsFor'\r\n  },\r\n  {\r\n    title: 'Paint Ag',\r\n    dataIndex: 'paintPointsAgainst'\r\n  },\r\n  {\r\n    title: '2nd For',\r\n    dataIndex: 'secondChanceFor'\r\n  },\r\n  {\r\n    title: '2nd Ag',\r\n    dataIndex: 'secondChanceAgainst'\r\n  },\r\n  \r\n]","//function to calculate the total time in seconds\r\n//given the time array\r\n\r\n\r\nexport const calcTime = (time:number[]):number =>{\r\n  let result = 0\r\n  for (let i = 0; i < time.length; i+=2) {\r\n    result += (time[i] - time[i+1])\r\n  }\r\n  return result\r\n}\r\n","//a function to calculate the total of all the lineups\r\n//return a lineup object with the totals \r\n\r\nimport { Lineup } from '../roster';\r\n\r\nexport const calcTotal = (array:Lineup[]) =>{\r\n  let temp = new Lineup([{name: 'Total', number: 0}]);\r\n  const keys = Object.keys(temp) as Array<keyof typeof temp>\r\n  keys.forEach((x)=>{\r\n    if(typeof temp[x] === 'number'){\r\n      (temp[x] as number) = array.reduce((prev,current)=>prev + (current[x] as number),0)\r\n    }\r\n  })\r\n  //add all of the times to the temp to be calced later\r\n  array.forEach((lineup)=>lineup.time.forEach((time)=>temp.time.push(time)))\r\n  return temp\r\n}","import React, {useState} from 'react';\nimport {parse} from './util/parse';\nimport './App.css';\nimport {Lineup} from './roster';\nimport Table from 'rc-table';\nimport {cols} from './tableSetup';\nimport {calcTime} from './util/calculateTime';\nimport {calcTotal} from './util/calculateTotal';\nimport Switch from 'react-switch';\n\nfunction App() {\n  const [plays, setPlays] = useState<string>('');\n  const [results, setResults] = useState<Lineup[]>([]);\n  const [show, setShow] = useState<boolean>(false);\n  const [men, setMen] = useState<boolean>(true);\n  const handleSubmit = () => {\n    const results = parse(plays, men);\n    console.log(results);\n    setResults(results);\n    setShow(true);\n  };\n  if (show) {\n    return (\n      <div>\n        <button type=\"button\" onClick={() => setShow(false)}>\n          Back\n        </button>\n        <Table\n          className=\"resultsTable\"\n          scroll={{x: true}}\n          columns={cols}\n          data={[...results, calcTotal(results)].map((x, i) => {\n            return {\n              ...x,\n              players: x.players.map((x) => x.name).join('-'),\n              time: calcTime(x.time),\n              attemptedTwosFor: x.madeTwosFor + x.missedTwosFor,\n              attemptedTwosAgainst: x.madeTwosAgainst + x.missedTwosAgainst,\n              attemptedThreesFor: x.madeThreesFor + x.missedThreesFor,\n              attemptedThreesAgainst:\n                x.madeThreesAgainst + x.missedThreesAgainst,\n              key: i,\n            };\n          })}\n        />\n      </div>\n    );\n  }\n  return (\n    <div className=\"App\">\n      \n      <textarea\n        value={plays}\n        onChange={(e) => setPlays(e.target.value)}\n        className=\"textBox\"\n        placeholder=\"Enter the play by play data here, starting with both teams starters.\"\n      ></textarea>\n      <button className=\"submit\" type=\"button\" onClick={handleSubmit}>\n        Submit\n      </button>\n      <div style={{color: 'white'}}></div>\n      <div className = 'sliderDiv'>\n        <div style = {{color: men ? '#242525': 'white', fontSize: '24px'}}>Women</div>\n        <Switch\n          checked={men}\n          onChange={(checked) => setMen(checked)}\n          checkedIcon={false}\n          uncheckedIcon={false}\n          borderRadius={6}\n          onColor = {'#CFB53B'}\n          offColor = {'#CFB53B'}\n          className = 'slider'\n        />\n        <div style = {{color: men ? 'white':'#242525', fontSize: '24px'}}>Men</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}